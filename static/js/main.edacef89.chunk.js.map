{"version":3,"sources":["logo.svg","App.js","index.js","serviceWorker.js"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,8KC+B5BC,MAvBf,WAGI,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACS,4CADT,wBAGA,uBACIH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJR,2BAbL,oJCCXC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SC0FpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.edacef89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\n\nconst getTest = () => {\n    return 'sdjfhsssfjsdhfjsdhfjksdhfjkashdflskdfhajsdhfksjhdfjksdhfjksdhfjkdhjkf sjdfhjsdfhsjdhfjsdfhjsdfhjsfhjdsfhjsfhjfhsjkfhskjhfskjdhfjsdfhjksdhfjsd'\n}\n\nfunction App () {\n    const aaa = getTest()\n\n    return (\n        <div className='App'>\n            <header className='App-header'>\n                <img src={logo} className='App-logo' alt='logo' />\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <a\n                    className='App-link'\n                    href='https://reactjs.org'\n                    target='_blank'\n                    rel='noopener noreferrer'\n                >\n                    this is new Learn React {aaa}\n                </a>\n            </header>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n// const isLocalhost = Boolean(\n//     window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.0/8 are considered localhost for IPv4.\n//     window.location.hostname.match(\n//         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// )\n\nexport function register () {\n}\n\n// function registerValidSW (swUrl, config) {\n//     navigator.serviceWorker\n//         .register(swUrl)\n//         .then((registration) => {\n//             registration.onupdatefound = () => {\n//                 const installingWorker = registration.installing\n//                 if (installingWorker == null) {\n//                     return\n//                 }\n//                 installingWorker.onstatechange = () => {\n//                     if (installingWorker.state === 'installed') {\n//                         if (navigator.serviceWorker.controller) {\n//                             // At this point, the updated precached content has been fetched,\n//                             // but the previous service worker will still serve the older\n//                             // content until all client tabs are closed.\n//                             console.log(\n//                                 'New content is available and will be used when all ' +\n//                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n//                             )\n//\n//                             // Execute callback\n//                             if (config && config.onUpdate) {\n//                                 config.onUpdate(registration)\n//                             }\n//                         } else {\n//                             // At this point, everything has been precached.\n//                             // It's the perfect time to display a\n//                             // \"Content is cached for offline use.\" message.\n//                             console.log('Content is cached for offline use.')\n//\n//                             // Execute callback\n//                             if (config && config.onSuccess) {\n//                                 config.onSuccess(registration)\n//                             }\n//                         }\n//                     }\n//                 }\n//             }\n//         })\n//         .catch((error) => {\n//             console.error('Error during service worker registration:', error)\n//         })\n// }\n\n// function checkValidServiceWorker (swUrl, config) {\n//     // Check if the service worker can be found. If it can't reload the page.\n//     fetch(swUrl, {\n//         headers: { 'Service-Worker': 'script' }\n//     })\n//         .then((response) => {\n//             // Ensure service worker exists, and that we really are getting a JS file.\n//             const contentType = response.headers.get('content-type')\n//             if (\n//                 response.status === 404 ||\n//         (contentType != null && contentType.indexOf('javascript') === -1)\n//             ) {\n//                 // No service worker found. Probably a different app. Reload the page.\n//                 navigator.serviceWorker.ready.then((registration) => {\n//                     registration.unregister().then(() => {\n//                         window.location.reload()\n//                     })\n//                 })\n//             } else {\n//                 // Service worker found. Proceed as normal.\n//                 registerValidSW(swUrl, config)\n//             }\n//         })\n//         .catch(() => {\n//             console.log(\n//                 'No internet connection found. App is running in offline mode.'\n//             )\n//         })\n// }\n\nexport function unregister () {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n"],"sourceRoot":""}